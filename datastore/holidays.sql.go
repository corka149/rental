// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: holidays.sql

package datastore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHoliday = `-- name: CreateHoliday :one
INSERT INTO holidays ("from", "to") VALUES ($1, $2) RETURNING id, "from", "to"
`

type CreateHolidayParams struct {
	From pgtype.Date
	To   pgtype.Date
}

func (q *Queries) CreateHoliday(ctx context.Context, arg CreateHolidayParams) (Holiday, error) {
	row := q.db.QueryRow(ctx, createHoliday, arg.From, arg.To)
	var i Holiday
	err := row.Scan(&i.ID, &i.From, &i.To)
	return i, err
}

const deleteHoliday = `-- name: DeleteHoliday :one
DELETE FROM holidays WHERE id = $1 RETURNING id, "from", "to"
`

func (q *Queries) DeleteHoliday(ctx context.Context, id int32) (Holiday, error) {
	row := q.db.QueryRow(ctx, deleteHoliday, id)
	var i Holiday
	err := row.Scan(&i.ID, &i.From, &i.To)
	return i, err
}

const getHolidayById = `-- name: GetHolidayById :one
SELECT id, "from", "to" FROM holidays WHERE id = $1
`

func (q *Queries) GetHolidayById(ctx context.Context, id int32) (Holiday, error) {
	row := q.db.QueryRow(ctx, getHolidayById, id)
	var i Holiday
	err := row.Scan(&i.ID, &i.From, &i.To)
	return i, err
}

const getHolidays = `-- name: GetHolidays :many
SELECT id, "from", "to" FROM holidays
`

func (q *Queries) GetHolidays(ctx context.Context) ([]Holiday, error) {
	rows, err := q.db.Query(ctx, getHolidays)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Holiday
	for rows.Next() {
		var i Holiday
		if err := rows.Scan(&i.ID, &i.From, &i.To); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHoliday = `-- name: UpdateHoliday :one
UPDATE holidays SET "from" = $1, "to" = $2 WHERE id = $3 RETURNING id, "from", "to"
`

type UpdateHolidayParams struct {
	From pgtype.Date
	To   pgtype.Date
	ID   int32
}

func (q *Queries) UpdateHoliday(ctx context.Context, arg UpdateHolidayParams) (Holiday, error) {
	row := q.db.QueryRow(ctx, updateHoliday, arg.From, arg.To, arg.ID)
	var i Holiday
	err := row.Scan(&i.ID, &i.From, &i.To)
	return i, err
}
