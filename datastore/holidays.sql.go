// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: holidays.sql

package datastore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHoliday = `-- name: CreateHoliday :one
INSERT INTO holidays (beginning, ending, title) VALUES ($1, $2, $3) RETURNING id, beginning, ending, title
`

type CreateHolidayParams struct {
	Beginning pgtype.Date
	Ending    pgtype.Date
	Title     string
}

func (q *Queries) CreateHoliday(ctx context.Context, arg CreateHolidayParams) (Holiday, error) {
	row := q.db.QueryRow(ctx, createHoliday, arg.Beginning, arg.Ending, arg.Title)
	var i Holiday
	err := row.Scan(
		&i.ID,
		&i.Beginning,
		&i.Ending,
		&i.Title,
	)
	return i, err
}

const deleteHoliday = `-- name: DeleteHoliday :one
DELETE FROM holidays WHERE id = $1 RETURNING id, beginning, ending, title
`

func (q *Queries) DeleteHoliday(ctx context.Context, id int32) (Holiday, error) {
	row := q.db.QueryRow(ctx, deleteHoliday, id)
	var i Holiday
	err := row.Scan(
		&i.ID,
		&i.Beginning,
		&i.Ending,
		&i.Title,
	)
	return i, err
}

const getHolidayById = `-- name: GetHolidayById :one
SELECT id, beginning, ending, title FROM holidays WHERE id = $1
`

func (q *Queries) GetHolidayById(ctx context.Context, id int32) (Holiday, error) {
	row := q.db.QueryRow(ctx, getHolidayById, id)
	var i Holiday
	err := row.Scan(
		&i.ID,
		&i.Beginning,
		&i.Ending,
		&i.Title,
	)
	return i, err
}

const getHolidays = `-- name: GetHolidays :many
SELECT id, beginning, ending, title FROM holidays ORDER BY beginning
`

func (q *Queries) GetHolidays(ctx context.Context) ([]Holiday, error) {
	rows, err := q.db.Query(ctx, getHolidays)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Holiday
	for rows.Next() {
		var i Holiday
		if err := rows.Scan(
			&i.ID,
			&i.Beginning,
			&i.Ending,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHoliday = `-- name: UpdateHoliday :one
UPDATE holidays SET beginning = $1, ending = $2, title = $3 WHERE id = $4 RETURNING id, beginning, ending, title
`

type UpdateHolidayParams struct {
	Beginning pgtype.Date
	Ending    pgtype.Date
	Title     string
	ID        int32
}

func (q *Queries) UpdateHoliday(ctx context.Context, arg UpdateHolidayParams) (Holiday, error) {
	row := q.db.QueryRow(ctx, updateHoliday,
		arg.Beginning,
		arg.Ending,
		arg.Title,
		arg.ID,
	)
	var i Holiday
	err := row.Scan(
		&i.ID,
		&i.Beginning,
		&i.Ending,
		&i.Title,
	)
	return i, err
}
