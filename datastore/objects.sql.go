// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: objects.sql

package datastore

import (
	"context"
)

const createObject = `-- name: CreateObject :one
INSERT INTO objects (name) VALUES ($1) RETURNING id, name
`

func (q *Queries) CreateObject(ctx context.Context, name string) (Object, error) {
	row := q.db.QueryRow(ctx, createObject, name)
	var i Object
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteObject = `-- name: DeleteObject :one
DELETE FROM objects WHERE id = $1 RETURNING id, name
`

func (q *Queries) DeleteObject(ctx context.Context, id int32) (Object, error) {
	row := q.db.QueryRow(ctx, deleteObject, id)
	var i Object
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getObjectById = `-- name: GetObjectById :one
SELECT id, name FROM objects WHERE id = $1
`

func (q *Queries) GetObjectById(ctx context.Context, id int32) (Object, error) {
	row := q.db.QueryRow(ctx, getObjectById, id)
	var i Object
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getObjectByIds = `-- name: GetObjectByIds :many
SELECT id, name FROM objects WHERE id = ANY($1::int[]) ORDER BY name
`

func (q *Queries) GetObjectByIds(ctx context.Context, ids []int32) ([]Object, error) {
	rows, err := q.db.Query(ctx, getObjectByIds, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Object
	for rows.Next() {
		var i Object
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObjects = `-- name: GetObjects :many
SELECT id, name FROM objects ORDER BY name
`

func (q *Queries) GetObjects(ctx context.Context) ([]Object, error) {
	rows, err := q.db.Query(ctx, getObjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Object
	for rows.Next() {
		var i Object
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateObject = `-- name: UpdateObject :one
UPDATE objects SET name = $1 WHERE id = $2 RETURNING id, name
`

type UpdateObjectParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateObject(ctx context.Context, arg UpdateObjectParams) (Object, error) {
	row := q.db.QueryRow(ctx, updateObject, arg.Name, arg.ID)
	var i Object
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
