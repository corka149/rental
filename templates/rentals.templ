package templates

import (
	"github.com/invopop/ctxi18n/i18n"
    "github.com/corka149/rental/datastore"
	"fmt"
)

templ RentalIndex(rentals []datastore.Rental, objectsById map[int32]datastore.Object) {
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
		<h1 class="text-2xl font-bold text-center sm:text-3xl lg:text-4xl mt-6 mb-8">{ i18n.T(ctx, "rental.rentals") }</h1>
		<div class="bg-gray-100 text-gray-700 text-sm mx-auto text-center p-4 rounded-lg max-w-md">
			{ i18n.T(ctx, "holiday.holidaysDescription") }
		</div>
		<a href="/rentals/new" class="block w-64 mx-auto py-2 px-4 my-2 mx-4 bg-gray-300 text-white rounded-lg text-center">{ i18n.T(ctx, "rental.newRental") }</a>
		<ul class="text-center">
			for _, rental := range rentals {
				<li class="max-w-sm mx-auto my-1">
					<a href={ templ.URL(fmt.Sprintf("/rentals/%d", rental.ID)) } class="block p-4 bg-gray-100 hover:bg-gray-200 rounded-lg">
						{ rental.Beginning.Time.Format("02.01.2006") } - { rental.Ending.Time.Format("02.01.2006") } { objName(objectsById, rental.ObjectID) }
					</a>
				</li>
			}
		</ul>
	</div>
}

templ RentalForm(rental datastore.Rental, target string, objects []datastore.Object, errorCodes... ErrorCode ) {
	<div class="max-w-md mx-auto">
		if target == "new" {
			<h1 class="text-2xl font-bold text-center sm:text-3xl lg:text-4xl mt-6 mb-8">{ i18n.T(ctx, "rental.newRental") }</h1>
		} else {
			<h1 class="text-2xl font-bold text-center sm:text-3xl lg:text-4xl mt-6 mb-8">{ i18n.T(ctx, "rental.editRental") }</h1>
		}

        <!-- Error messages -->
        if len(errorCodes) > 0 {
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                <ul>
                    for _, errCode := range errorCodes {
                        <li>{ i18n.T(ctx, errCode.String()) }</li>
                    }
                </ul>
            </div>
        }
        
		<form action={ templ.URL("/rentals/" + target) } method="post" class="space-y-4">
			<!-- DESCRIPTION -->
			<div>
				<label for="description" class="block text-sm font-medium text-gray-700">{ i18n.T(ctx, "rental.description") }</label>
				<input required type="text" name="description" id="description" class="mt-1 block
					w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
					value={ rental.Description.String }/>
			</div>
			<!-- BEGINNING -->
			<div>
				<label for="beginning" class="block text-sm font-medium text-gray-700">{ i18n.T(ctx, "rental.beginning") }</label>
				<input required type="date" name="beginning" id="beginning" class="mt-1 block
					w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
					value={ rental.Beginning.Time.Format("2006-01-02") }/>
			</div>
			<!-- ENDING -->
			<div>
				<label for="ending" class="block text-sm font-medium text-gray-700">{ i18n.T(ctx, "rental.ending") }</label>
				<input required type="date" name="ending" id="ending" class="mt-1 block
					w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
					value={ rental.Ending.Time.Format("2006-01-02") }/>
			</div>
			<!-- OBJECT -->
			<div>
				<label for="object" class="block text-sm font-medium text-gray-700">{ i18n.T(ctx, "rental.object") }</label>
				<select required name="object" id="object" class="mt-1 block
					w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
					for _, obj := range objects {
						<option value={ fmt.Sprintf("%d", obj.ID) } selected?={ obj.ID == rental.ObjectID }>{ obj.Name }</option>
					}
				</select>
			</div>
			<!-- SUBMIT -->
			<button type="submit" value="Create" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
				{ i18n.T(ctx, "rental.save") }
			</button>
		</form>
		if target != "new" {
			<form
				action={ templ.URL(fmt.Sprintf("/rentals/%s/delete", target)) }
				method="post"
				class="space-y-4 py-2"
				id="confirmed-form"
				data-title={ i18n.T(ctx, "rental.deleteRentalDialog") }
			>
				<button type="submit" value="Delete" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-300 hover:bg-red-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
					{ i18n.T(ctx, "rental.deleteRental") }
				</button>
			</form>
		}
	</div>
}

func objName(objectsById map[int32]datastore.Object, id int32) string {
    if obj, ok := objectsById[id]; ok {
        return obj.Name
    }

    return fmt.Sprintf("Object %d", id)
}
